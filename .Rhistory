install.packages("HoRM")
install.packages("MANOVA.RM")
library(HoRM)
SSCP.fn(fits=manova_model)
SSCP_W <- 49*cov_matrices$setosa + 49*cov_matrices$versicolor +49*cov_matrices$virginica
SSCP_W <- 49*cov_matrices$setosa + 49*cov_matrices$versicolor +49*cov_matrices$virginica
cov_matrices <- lapply(split(iris[,-5],iris$Species),cov)
cov_matrices$setosa
cov_matrices$versicolor
cov_matrices$virginica
SSCP_W <- 49*cov_matrices$setosa + 49*cov_matrices$versicolor +49*cov_matrices$virginica
SSCP_W
SSCP_tot<-cov(cbind(SL,SW,PL,PW))*149
SSCP_tot
SSCP_B <-SSCP_tot-SSCP_W
SSCP_B
wilks_lambda <-det(SSCP_W)/det(SSCP_tot)
wilks_lambda
qt(0.998,147)
oil
??oil
data(oil)
data("oil")
library(fpp)
plot(euretail)
?euretail
length(euretail)
euretail
Acf(euretail,100)
Deuretail = diff(euretail,1)
D4D1 = diff(Deuretail,4) #sesonal length =4
Acf(D4D1,100) #Implies the seasonal behaviour (D=0)
pacf(D4D1,100)
#both ACF and PACF are not exponentionaly decaying
#ACF and PACF cut off at lag 3
?Arima
fit1 = Arima(euretail,order=c(0,1,1),seasonal=c(0,1,0)) #order=(p,d,q),seasonal=(P,D,Q)
fit1
summary(fit1)
coeftest(fit1)
fit2 = Arima(euretail,order=c(0,1,1),seasonal=c(0,1,1)) #order=(p,d,q),seasonal=(P,D,Q)
fit2
summary(fit2)
coeftest(fit2)
library(tidyverse)
data("USArrests")
View(USArrests)
??USArrests
head(USArrests)
str(USArrests)
#Calculate principal components (based on co-relation matrix "Scale =True")
result_corr <- prcomp(USArrests,scale =TRUE )
result_corr
#get column means of data set
colMeans(USArrests)
var_murder <- var(USArrests,[,1])
var_murder <- var(USArrests[,1])
var_assault <- var(USArrests[,2])
var_urbanPop <- var(USArrests[,3])
var_rape <- var(USArrests[,4])
var_murder
var_assault
var_urbanPop
var_rape
summary(result_corr)
#Calculate principal components (based on co-variance matrix "Scale =True")
result_cov <- prcomp(USArrests,scale =FALSE )
result_cov
summary(result_cov)
biplot(result_cov,scale=0)
#recall the library to import the data set
library(tidyverse)
data("USArrests")
??USArrests
head(USArrests)
str(USArrests)
#get column means of data set
colMeans(USArrests)
var_murder <- var(USArrests[,1])
var_murder
var_assault <- var(USArrests[,2])
var_assault
var_urbanPop <- var(USArrests[,3])
var_urbanPop
var_rape <- var(USArrests[,4])
var_rape
#Calculate principal components (based on co-relation matrix "Scale =True")
result_corr <- prcomp(USArrests,scale =TRUE )
result_corr
summary(result_corr)
#Calculate principal components (based on co-variance matrix "Scale =True")
result_cov <- prcomp(USArrests,scale =FALSE )
result_cov
summary(result_cov)
biplot(result_cov,scale=0)
library(fpp)
?wmurders
data("wmurders")
wmurders
#plotting the data set
plot(wmurders)
After1975 = window(ts(wmurders),25,55)
After1975 = ts(After1975,start = 1975, end = 2004)
plot(After1975)
#plotting the data set
plot(wmurders)
plot(After1975)
MA_5 = ma(After1975,5)
plot(MA_5)
#Plot actual vs fitted values in MA_5 using matplot
t = seq(1,length(After1975),1)
matplot(t,cbind(After1975,MA_5),type="l",col=c("red","green"),lty = c(1,1))
?matplot
## Regression Approach ##
t = seq(1,length(After1975),1)
fit = lm(After1975~t)
fits <- fit$fitted.values
matplot(t,cbind(After1975,fits),type="l",col=c("red","green"),lty = c(1,1))
## Single Exponential Approaching Method ##
library(fpp)
plot(oil)
plot(oil)
fitSES <- ses(oil, h=12 ,alpha=0.8)
#Loading relevant library that contains data set
library(fpp)
?wmurders
wmurders
#plotting the data set
plot(wmurders)
#by exploring the wmurders plot there is clear trend in the data between 1975 to 2004
#Therefore we have to separate that portion to create a time series
#creating a subset of the original time series data.
#It selects a window of data from years 25 to 55 of the original time series
After1975 = window(ts(wmurders),25,55)
#This code line converts the previously selected window of data (After1975) into a new time series object.
#It sets the start and end years for this time series.
#So, you are now specifically analyzing data from 1975 to 2004
After1975 = ts(After1975,start = 1975, end = 2004)
plot(After1975)
#Data
## Moving Average Approach ##
#his code calculates a moving average with a window size of 5 for the After1975 time series.
#It computes the average value of the time series within a rolling window of 5 data points
MA_5 = ma(After1975,5)
plot(MA_5)
#Plot actual vs fitted values in MA_5 using matplot
#sequence starting from no 1 that's what the first 1 says
#length of the the sequence is the length of After1975
#and final 1 says the increment of the sequence is 1 by 1
t = seq(1,length(After1975),1)
?matplot
matplot(t,cbind(After1975,MA_5),type="l",col=c("red","green"),lty = c(1,1))
## Regression Approach ##
t = seq(1,length(After1975),1)
#This line fits a linear regression model.
#It models After1975 as a function of t,
#effectively trying to find a linear relationship between the two variables.
#The result is stored in the variable fit.
fit = lm(After1975~t)
#After fitting the linear regression model,
#this line extracts the fitted or predicted values from the model and assigns them to the variable fits.
#These predicted values represent the values of After1975 that the linear regression model estimates based on the values of t.
fits <- fit$fitted.values
matplot(t,cbind(After1975,fits),type="l",col=c("red","green"),lty = c(1,1))
summary(fit)
## Single Exponential Approaching Method ##
library(fpp)
plot(oil)
#Apply Single exponential smoothing for oil data set
# ses() is function to apply single exponential smoothing
# h=12 is the no of periods that want to forecast in future
# smoothing parameter alpha is 0.8
fitSES <- ses(oil, h=12 ,alpha=0.8)
#calling fitted values in exponential smoothing model
fitSES$fitted
# Assigning fitted values into a variable called fitSESFitted
FitSESFitted <- fitSES$fitted
#plotting actual vs fitted values of exponential smoothing method using matplot
matplot(t,cbind(oil,FitSESFitted),type="l",col = ("red","green"),lty=c(1,1))
#plotting actual vs fitted values of exponential smoothing method using matplot
matplot(t,cbind(oil,FitSESFitted),type="l",col = c("red","green"),lty=c(1,1))
#plotting actual vs fitted values of exponential smoothing method using matplot
matplot(t,cbind(oil,FitSESFitted),type="l",col = c("red","green"),lty=c(1,1))
# creating a sequence for time
t = seq(1,length(oil),1)
#calling fitted values in exponential smoothing model
fitSES$fitted
# Assigning fitted values into a variable called fitSESFitted
FitSESFitted <- fitSES$fitted
#plotting actual vs fitted values of exponential smoothing method using matplot
matplot(t,cbind(oil,FitSESFitted),type="l",col=c("red","green"),lty=c(1,1))
---
title: "FTSA R code day 1"
---
title: "FTSA R code day 1"
?wmurders
wmurders
?wmurders
wmurders
#plotting the data set
plot(wmurders)
#by exploring the wmurders plot there is clear trend in the data between 1975 to 2004
#Therefore we have to separate that portion to create a time series
#creating a subset of the original time series data.
#It selects a window of data from years 25 to 55 of the original time series
After1975 = window(ts(wmurders),25,55)
#This code line converts the previously selected window of data (After1975) into a new time series object.
#It sets the start and end years for this time series.
#So, you are now specifically analyzing data from 1975 to 2004
After1975 = ts(After1975,start = 1975, end = 2004)
plot(After1975)
#Data
#his code calculates a moving average with a window size of 5 for the After1975 time series.
#It computes the average value of the time series within a rolling window of 5 data points
MA_5 = ma(After1975,5)
#his code calculates a moving average with a window size of 5 for the After1975 time series.
#It computes the average value of the time series within a rolling window of 5 data points
MA_5 = ma(After1975,5)
#sequence starting from no 1 that's what the first 1 says
#length of the the sequence is the length of After1975
#and final 1 says the increment of the sequence is 1 by 1
t = seq(1,length(After1975),1)
?matplot
matplot(t,cbind(After1975,MA_5),type="l",col=c("red","green"),lty = c(1,1))
#Loading relevant library that contains data set
library(fpp)
?wmurders
wmurders
#plotting the data set
plot(wmurders)
#by exploring the wmurders plot there is clear trend in the data between 1975 to 2004
#Therefore we have to separate that portion to create a time series
#creating a subset of the original time series data.
#It selects a window of data from years 25 to 55 of the original time series
After1975 = window(ts(wmurders),25,55)
#This code line converts the previously selected window of data (After1975) into a new time series object.
#It sets the start and end years for this time series.
#So, you are now specifically analyzing data from 1975 to 2004
After1975 = ts(After1975,start = 1975, end = 2004)
plot(After1975)
#Data
## Moving Average Approach ##
#his code calculates a moving average with a window size of 5 for the After1975 time series.
#It computes the average value of the time series within a rolling window of 5 data points
MA_5 = ma(After1975,5)
plot(MA_5)
#Plot actual vs fitted values in MA_5 using matplot
#sequence starting from no 1 that's what the first 1 says
#length of the the sequence is the length of After1975
#and final 1 says the increment of the sequence is 1 by 1
t = seq(1,length(After1975),1)
?matplot
matplot(t,cbind(After1975,MA_5),type="l",col=c("red","green"),lty = c(1,1))
## Regression Approach ##
t = seq(1,length(After1975),1)
#This line fits a linear regression model.
#It models After1975 as a function of t,
#effectively trying to find a linear relationship between the two variables.
#The result is stored in the variable fit.
fit = lm(After1975~t)
#After fitting the linear regression model,
#this line extracts the fitted or predicted values from the model and assigns them to the variable fits.
#These predicted values represent the values of After1975 that the linear regression model estimates based on the values of t.
fits <- fit$fitted.values
matplot(t,cbind(After1975,fits),type="l",col=c("red","green"),lty = c(1,1))
summary(fit)
#Loading relevant library that contains data set
library(fpp)
?wmurders
wmurders
#plotting the data set
plot(wmurders)
#by exploring the wmurders plot there is clear trend in the data between 1975 to 2004
#Therefore we have to separate that portion to create a time series
#creating a subset of the original time series data.
#It selects a window of data from years 25 to 55 of the original time series
After1975 = window(ts(wmurders),25,55)
#This code line converts the previously selected window of data (After1975) into a new time series object.
#It sets the start and end years for this time series.
#So, you are now specifically analyzing data from 1975 to 2004
After1975 = ts(After1975,start = 1975, end = 2004)
plot(After1975)
#Data
## Moving Average Approach ##
#his code calculates a moving average with a window size of 5 for the After1975 time series.
#It computes the average value of the time series within a rolling window of 5 data points
MA_5 = ma(After1975,5)
plot(MA_5)
#Plot actual vs fitted values in MA_5 using matplot
#sequence starting from no 1 that's what the first 1 says
#length of the the sequence is the length of After1975
#and final 1 says the increment of the sequence is 1 by 1
t = seq(1,length(After1975),1)
?matplot
matplot(t,cbind(After1975,MA_5),type="l",col=c("red","green"),lty = c(1,1))
## Regression Approach ##
t = seq(1,length(After1975),1)
#This line fits a linear regression model.
#It models After1975 as a function of t,
#effectively trying to find a linear relationship between the two variables.
#The result is stored in the variable fit.
fit = lm(After1975~t)
#After fitting the linear regression model,
#this line extracts the fitted or predicted values from the model and assigns them to the variable fits.
#These predicted values represent the values of After1975 that the linear regression model estimates based on the values of t.
fits <- fit$fitted.values
matplot(t,cbind(After1975,fits),type="l",col=c("red","green"),lty = c(1,1))
summary(fit)
tinytex::install_tinytex()
#Loading relevant library that contains data set
library(fpp)
?wmurders
wmurders
#plotting the data set
plot(wmurders)
#by exploring the wmurders plot there is clear trend in the data between 1975 to 2004
#Therefore we have to separate that portion to create a time series
#creating a subset of the original time series data.
#It selects a window of data from years 25 to 55 of the original time series
After1975 = window(ts(wmurders),25,55)
#This code line converts the previously selected window of data (After1975) into a new time series object.
#It sets the start and end years for this time series.
#So, you are now specifically analyzing data from 1975 to 2004
After1975 = ts(After1975,start = 1975, end = 2004)
plot(After1975)
#Data
## Moving Average Approach ##
#his code calculates a moving average with a window size of 5 for the After1975 time series.
#It computes the average value of the time series within a rolling window of 5 data points
MA_5 = ma(After1975,5)
plot(MA_5)
#Plot actual vs fitted values in MA_5 using matplot
#sequence starting from no 1 that's what the first 1 says
#length of the the sequence is the length of After1975
#and final 1 says the increment of the sequence is 1 by 1
t = seq(1,length(After1975),1)
?matplot
matplot(t,cbind(After1975,MA_5),type="l",col=c("red","green"),lty = c(1,1))
## Regression Approach ##
t = seq(1,length(After1975),1)
#This line fits a linear regression model.
#It models After1975 as a function of t,
#effectively trying to find a linear relationship between the two variables.
#The result is stored in the variable fit.
fit = lm(After1975~t)
#After fitting the linear regression model,
#this line extracts the fitted or predicted values from the model and assigns them to the variable fits.
#These predicted values represent the values of After1975 that the linear regression model estimates based on the values of t.
fits <- fit$fitted.values
matplot(t,cbind(After1975,fits),type="l",col=c("red","green"),lty = c(1,1))
summary(fit)
library(fpp)
plot(wmurders)
length(wmurders)
?wmurders
wmurders
trainingSet <- window(ts(wmurders),1,43)
testingSet <- window(ts(wmurders),44,55)
#Converting the training and testing set into time series variables
trainingSet <- ts(trainingSet, frequency = 12, start = 1950)
testingSet <- ts(testingSet, frequency = 12, start = 2004)
plot(trainingSet)
# make the variance constant by transforming
# This helps to make the variance constant over when we dealing with series which vary the variance over the time
LWmurd = log(trainingSet)
plot(LWmurd)
Acf(LWmurd) #Shows that series is not stationary
ndiffs(LWmurd)
## Identifying the order of non-seasonal differencing
D1LWmurd = diff(LWmurd,1)
plot(D1LWmurd)
acf(D1LWmurd)
plot(D1LWmurd)
acf(D1LWmurd)
library(fpp)
plot(wmurders)
length(wmurders)
#length is 55
?wmurders
wmurders
#data taken from 1950 to 2004
#in monthly basis
#partition data set into test and training set
trainingSet <- window(ts(wmurders),1,43)
testingSet <- window(ts(wmurders),44,55)
#Converting the training and testing set into time series variables
trainingSet <- ts(trainingSet, frequency = 12, start = 1950)
testingSet <- ts(testingSet, frequency = 12, start = 2004)
plot(trainingSet)
#Plot shows variance is vary over the time periods
# make the variance constant by transforming
# This helps to make the variance constant over when we dealing with series which vary the variance over the time
LWmurd = log(trainingSet)
plot(LWmurd)
Acf(LWmurd) #Shows that series is not stationary
ndiffs(LWmurd)
## Identifying the order of non-seasonal differencing
D1LWmurd = diff(LWmurd,1)
plot(D1LWmurd)
acf(D1LWmurd)
pacf(D1LWmurd)
Box.test(D1LWmurd,lag=12, type = "Ljung")
#P value is greater than 0.05 that mean we have don't have enough evidence to reject null hypothesis(Ho)
#That mean model doesn't have significant autocorrelation in the residuals of the D1LWmurd
# Modeling using the recent set of data
trainingSet = window(ts(wmurders),22,50)
testingSet = window(ts(wmurders),51,55)
trainingSet =ts(trainingSet,frequency = 12,start=1952)
plot(trainingSet)
Acf(trainingSet,50)
pacf(trainingSet,50)
#Parameter estimation
fit1 = Arima(trainingSet,order=c(1,0,0), include.mean = TRUE)
summary(fit1)
coeftest(fit1)
Acf(trainingSet,50)
pacf(trainingSet,50)
plot(trainingSet)
Acf(trainingSet,50)
pacf(trainingSet,50)
Acf(trainingSet,50)
library(fpp)
plot(euretail)
ndiffs(euretail)
library(psych)
library(fpp)
??unconsumption
plot(unconsumption)
??usconsumption
plot(usconsumption)
??usconsumption
plot(usconsumption)
df1 <- df(usconsumption)
df1 <- data.frame(usconsumption)
df1
x<- df1$consumption
y<- df1$income
lm(x,y)
??lm
model1 <- lm(y~x)
summary(model1)
Box.test(model1,lag = 1,type"Ljung-Box")
Box.test(model1,lag = 1,type"Ljung")
plot(model1)
plot(usconsumption)
acf(x)
acf(x,100)
acf(model1$residuals,100)
res<-diff(model1$residuals,1)
acf(res)
acf(res,100)
acf(res,100)
acf(model1$residuals,100)
plot(usconsumption)
df1 <- data.frame(usconsumption)
df1
x<- df1$consumption
y<- df1$income
acf(x,100)
model1 <- lm(y~x)
summary(model1)
plot(model1)
acf(model1$residuals,100)
Box.test(model1$residuals,lag = 12,type"Ljung")
Box.test(model1$residuals,lag = 12,type"Ljung")
Box.test(model1$residuals,lag = 12,type = "Ljung")
library(fpp)
usconsumption
regmodel = lm (usconsumption[,1]~usconsumption[,2])
Box.test(residuals(model1))
model1 <- lm(x~y)
summary(model1)
plot(model1)
Box.test(model1$residuals,lag = 12,type = "Ljung")
Box.test(residuals(model1))
plot(usconsumption)
plot(ts(residuals(model1)))
# Project CM3052
# DNR Peiris
# D/DBA/21/0026
# First Setting a working directory
setwd("D:/KDU/Semester 06/Assignments/Multivariant/backup code")
#Loading nessacry libraries
library(readxl)
library(skimr)
library(corrplot)
library(reshape2)
library(ggplot2)
library(factoextra)
library(NbClust)
df = data.frame(read_xlsx("CM 3052_project data.xlsx"))
# Define the standard mean values (replace these with your specific standards)
standard_means <- c(Be = 4, Cr = 100, Fe = 300, Ni = 20 , Cu = 1300, As = 10, Cd =5, Ba = 2000, Tl = 0.5, Pb=15,U=30)
# Create an empty data frame to store results
results <- data.frame(Component = character(0), P_Value = numeric(0), Hypothesis = character(0))
# Loop through each component to perform hypothesis testing
for (component in names(standard_means)) {
component_data <- df[, component]  # Extract the component data
standard_mean <- standard_means[component]  # Extract the standard mean
# Perform the one-sample t-test
t_test_result <- t.test(component_data, mu = standard_mean)
# Create a hypothesis statement based on the test result
if (t_test_result$p.value < 0.05) {
hypothesis <- "Reject H0"
} else {
hypothesis <- "Fail to Reject H0"
}
# Append the results to the data frame
results <- rbind(results, data.frame(Component = component, P_Value = t_test_result$p.value, Hypothesis = hypothesis))
}
# Print the results
print(results)
